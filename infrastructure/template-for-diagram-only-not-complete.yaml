AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Document Analysis and Tagging System - Production Architecture

Parameters:
  Environment:
    Type: String
    Default: prod
    AllowedValues:
      - dev
      - staging
      - prod
    Description: Deployment environment

  CustomerS3Bucket:
    Type: String
    Description: Customer's S3 bucket for document storage

  BedrockModelId:
    Type: String
    Default: anthropic.claude-3-sonnet-20240229-v1:0
    Description: AWS Bedrock model ID to use for analysis

Resources:
  # DynamoDB Tables
  DocumentsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${Environment}-documents
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: documentId
          AttributeType: S
        - AttributeName: createdAt
          AttributeType: S
      KeySchema:
        - AttributeName: documentId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: CreatedAtIndex
          KeySchema:
            - AttributeName: createdAt
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  TagsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${Environment}-tags
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: tagId
          AttributeType: S
        - AttributeName: tagName
          AttributeType: S
      KeySchema:
        - AttributeName: tagId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: TagNameIndex
          KeySchema:
            - AttributeName: tagName
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  # Lambda Functions
  ProcessingFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}-document-processor
      CodeUri: ../src/lambda/processing/
      Handler: app.lambda_handler
      Runtime: python3.11
      Timeout: 900
      MemorySize: 1024
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          DOCUMENTS_TABLE: !Ref DocumentsTable
          TAGS_TABLE: !Ref TagsTable
          BEDROCK_MODEL_ID: !Ref BedrockModelId
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DocumentsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref TagsTable
        - Statement:
            - Effect: Allow
              Action:
                - bedrock:InvokeModel
              Resource: !Sub arn:aws:bedrock:${AWS::Region}::foundation-model/${BedrockModelId}
        - Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
                - s3:DeleteObject
              Resource: !Sub arn:aws:s3:::${CustomerS3Bucket}/*
      Events:
        S3Upload:
          Type: S3
          Properties:
            Bucket: !Ref CustomerS3Bucket
            Events: s3:ObjectCreated:*
        CustomerS3:
          Type: S3
          Properties:
            Bucket: !Ref CustomerS3
            Events:
              - s3:ObjectCreated:*
              - s3:ObjectRemoved:*

  QueryFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}-document-query
      CodeUri: ../src/lambda/query/
      Handler: app.lambda_handler
      Runtime: python3.11
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          DOCUMENTS_TABLE: !Ref DocumentsTable
          TAGS_TABLE: !Ref TagsTable
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref DocumentsTable
        - DynamoDBReadPolicy:
            TableName: !Ref TagsTable

  # API Gateway
  Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      Cors:
        AllowMethods: '''GET,POST,OPTIONS'''
        AllowHeaders: '''Content-Type,Authorization,X-Api-Key'''
        AllowOrigin: '''*'''
      Auth:
        ApiKeyRequired: false
      DefinitionBody:
        openapi: 3.0.1
        info:
          title: Document Analysis API
          version: 1.0.0
        paths:
          /api/documents:
            get:
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${QueryFunction.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
          /api/documents/{id}:
            get:
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${QueryFunction.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
          /api/documents/{id}/summary:
            get:
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${QueryFunction.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
          /api/documents/{id}/tags:
            get:
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${QueryFunction.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
          /api/tags:
            get:
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${QueryFunction.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
          /api/tags/{id}:
            get:
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${QueryFunction.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
          /api/tags/{id}/documents:
            get:
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${QueryFunction.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy

  Prompt:
    Type: AWS::Bedrock::Prompt
    Properties:
      Name: <String>
  CustomerS3:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-customers-${AWS::AccountId}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: alias/aws/s3
      PublicAccessBlockConfiguration:
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  CustomerS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CustomerS3
      PolicyDocument:
        Id: RequireEncryptionInTransit
        Version: '2012-10-17'
        Statement:
          - Principal: '*'
            Action: '*'
            Effect: Deny
            Resource:
              - !GetAtt CustomerS3.Arn
              - !Sub ${CustomerS3.Arn}/*
            Condition:
              Bool:
                aws:SecureTransport: 'false'

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub https://${Api}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/

  ApiKey:
    Description: API Key for authentication
    Value: !Ref ApiKey

  DocumentsTableName:
    Description: DynamoDB table for documents
    Value: !Ref DocumentsTable

  TagsTableName:
    Description: DynamoDB table for tags
    Value: !Ref TagsTable